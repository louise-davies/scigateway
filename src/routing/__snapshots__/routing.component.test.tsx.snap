// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Routing component redirects to a homepage URL if specified 1`] = `
<div
  className="container-class"
>
  <Switch>
    <Route
      exact={true}
      path="/"
    >
      <Redirect
        to="/homepage"
      />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(HelpPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/help"
    />
    <Route
      path="/admin"
      render={[Function]}
    />
    <Route
      exact={true}
      path="/login"
    >
      <Connect(LoginPageComponent) />
    </Route>
    <Route
      exact={true}
      path="/logout"
    >
      <Connect(LogoutPageComponent) />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(CookiesPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/cookies"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(WithAuthComponent)",
          "type": [Function],
        }
      }
    />
  </Switch>
</div>
`;

exports[`Routing component redirects to the homepage if navigating to login page while logged in 1`] = `
<div
  className="container-class"
>
  <Switch>
    <Route
      exact={true}
      path="/"
    >
      <HomePage />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(HelpPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/help"
    />
    <Route
      path="/admin"
      render={[Function]}
    />
    <Route
      exact={true}
      path="/login"
    >
      <Connect(LoginPageComponent) />
    </Route>
    <Route
      exact={true}
      path="/logout"
    >
      <Connect(LogoutPageComponent) />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(CookiesPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/cookies"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(WithAuthComponent)",
          "type": [Function],
        }
      }
    />
  </Switch>
</div>
`;

exports[`Routing component renders a route for a plugin when site is under maintenance and user is admin 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/test_link",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/test_link",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/test_link",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Routing)
        classes={
          Object {
            "container": "container-class",
            "containerShift": "containerShift-class",
          }
        }
      >
        <Routing
          classes={
            Object {
              "container": "container-class",
              "containerShift": "containerShift-class",
            }
          }
          dispatch={[Function]}
          drawerOpen={false}
          loading={false}
          location="/"
          maintenance={
            Object {
              "message": "test",
              "show": true,
            }
          }
          plugins={
            Array [
              Object {
                "displayName": "Test Plugin",
                "link": "/test_link",
                "order": 1,
                "plugin": "test_plugin_name",
                "section": "test section",
              },
            ]
          }
          userIsAdmin={true}
          userIsloggedIn={true}
        >
          <div
            className="container-class"
          >
            <Switch>
              <Route
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/test_link",
                    "url": "/test_link",
                  }
                }
                key="test_plugin_name"
                location={
                  Object {
                    "hash": "",
                    "key": "testKey",
                    "pathname": "/test_link",
                    "search": "",
                  }
                }
                path={
                  Array [
                    "/test_link",
                  ]
                }
              >
                <Connect(WithAuthComponent)
                  id="test_plugin_name"
                >
                  <WithAuthComponent
                    id="test_plugin_name"
                    invalidToken={[Function]}
                    loading={false}
                    location="/"
                    loggedIn={true}
                    provider={
                      TestAuthProvider {
                        "authUrl": undefined,
                        "autoLogin": undefined,
                        "mnemonic": undefined,
                        "redirectUrl": null,
                        "token": "logged in",
                        "user": null,
                      }
                    }
                    requestPluginRerender={[Function]}
                    userIsAdmin={true}
                  >
                    <div>
                      <PluginPlaceHolder
                        id="test_plugin_name"
                      >
                        <div
                          id="test_plugin_name"
                        >
                          <Preloader
                            fullScreen={false}
                            loading={true}
                          >
                            Mocked Preloader
                          </Preloader>
                        </div>
                      </PluginPlaceHolder>
                    </div>
                  </WithAuthComponent>
                </Connect(WithAuthComponent)>
              </Route>
            </Switch>
          </div>
        </Routing>
      </Connect(Routing)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Routing component renders a route for admin page 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/admin",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/admin",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/admin",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Routing)
        classes={
          Object {
            "container": "container-class",
            "containerShift": "containerShift-class",
          }
        }
      >
        <Routing
          classes={
            Object {
              "container": "container-class",
              "containerShift": "containerShift-class",
            }
          }
          dispatch={[Function]}
          drawerOpen={false}
          loading={false}
          location="/"
          maintenance={
            Object {
              "message": "",
              "show": false,
            }
          }
          plugins={Array []}
          userIsAdmin={true}
          userIsloggedIn={true}
        >
          <div
            className="container-class"
          >
            <Switch>
              <Route
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/admin",
                    "url": "/admin",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "testKey",
                    "pathname": "/admin",
                    "search": "",
                  }
                }
                path="/admin"
                render={[Function]}
              >
                <Connect(WithAuthComponent)>
                  <WithAuthComponent
                    invalidToken={[Function]}
                    loading={false}
                    location="/"
                    loggedIn={true}
                    provider={
                      TestAuthProvider {
                        "authUrl": undefined,
                        "autoLogin": undefined,
                        "mnemonic": undefined,
                        "redirectUrl": null,
                        "token": "logged in",
                        "user": null,
                      }
                    }
                    requestPluginRerender={[Function]}
                    userIsAdmin={true}
                  >
                    <div>
                      <Component>
                        Mocked AdminPage
                      </Component>
                    </div>
                  </WithAuthComponent>
                </Connect(WithAuthComponent)>
              </Route>
            </Switch>
          </div>
        </Routing>
      </Connect(Routing)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Routing component renders a route for maintenance page when site is under maintenance and user is not admin 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/test_link",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/test_link",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/test_link",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Routing)
        classes={
          Object {
            "container": "container-class",
            "containerShift": "containerShift-class",
          }
        }
      >
        <Routing
          classes={
            Object {
              "container": "container-class",
              "containerShift": "containerShift-class",
            }
          }
          dispatch={[Function]}
          drawerOpen={false}
          loading={false}
          location="/"
          maintenance={
            Object {
              "message": "test",
              "show": true,
            }
          }
          plugins={
            Array [
              Object {
                "displayName": "Test Plugin",
                "link": "/test_link",
                "order": 1,
                "plugin": "test_plugin_name",
                "section": "test section",
              },
            ]
          }
          userIsAdmin={false}
          userIsloggedIn={true}
        >
          <div
            className="container-class"
          >
            <Switch>
              <Route
                component={[Function]}
                computedMatch={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "key": "testKey",
                    "pathname": "/test_link",
                    "search": "",
                  }
                }
              >
                <Component
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "key": "testKey",
                          "pathname": "/test_link",
                          "search": "",
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "key": "testKey",
                        "pathname": "/test_link",
                        "search": "",
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/test_link",
                      "search": "",
                    }
                  }
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                >
                  Mocked MaintenancePage
                </Component>
              </Route>
            </Switch>
          </div>
        </Routing>
      </Connect(Routing)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Routing component renders component with no plugin routes 1`] = `
<div
  className="container-class"
>
  <Switch>
    <Route
      exact={true}
      path="/"
    >
      <HomePage />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(HelpPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/help"
    />
    <Route
      path="/admin"
      render={[Function]}
    />
    <Route
      exact={true}
      path="/login"
    >
      <Connect(LoginPageComponent) />
    </Route>
    <Route
      exact={true}
      path="/logout"
    >
      <Connect(LogoutPageComponent) />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(CookiesPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/cookies"
    />
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(WithAuthComponent)",
          "type": [Function],
        }
      }
    />
  </Switch>
</div>
`;

exports[`Routing component renders component with plugins 1`] = `
<div
  className="container-class"
>
  <Switch>
    <Route
      exact={true}
      path="/"
    >
      <HomePage />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(HelpPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/help"
    />
    <Route
      path="/admin"
      render={[Function]}
    />
    <Route
      exact={true}
      path="/login"
    >
      <Connect(LoginPageComponent) />
    </Route>
    <Route
      exact={true}
      path="/logout"
    >
      <Connect(LogoutPageComponent) />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(CookiesPage)",
          "type": [Function],
        }
      }
      exact={true}
      path="/cookies"
    />
    <Route
      key="test_plugin_name"
      path={
        Array [
          "test link",
          "test link alt",
        ]
      }
    >
      <Connect(WithAuthComponent)
        id="test_plugin_name"
      />
    </Route>
    <Route
      key="test_plugin_name_2"
      path={
        Array [
          "test link 2",
        ]
      }
    >
      <Connect(WithAuthComponent)
        id="test_plugin_name_2"
      />
    </Route>
    <Route
      component={
        Object {
          "$$typeof": Symbol(react.memo),
          "WrappedComponent": [Function],
          "compare": null,
          "displayName": "Connect(WithAuthComponent)",
          "type": [Function],
        }
      }
    />
  </Switch>
</div>
`;

exports[`Routing component renders placeholder for a plugin 1`] = `
<div
  id="test_id"
>
  <Preloader
    fullScreen={false}
    loading={true}
  />
</div>
`;
