// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Routing component redirects to a homepage URL if specified 1`] = `
<ContextProvider
  value={null}
>
  <Routing
    dispatch={[Function]}
    drawerOpen={false}
    homepageUrl="/homepage"
    loading={true}
    location="/"
    maintenance={
      Object {
        "message": "",
        "show": false,
      }
    }
    plugins={Array []}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
    userIsloggedIn={false}
  />
</ContextProvider>
`;

exports[`Routing component redirects to the homepage if navigating to login page while logged in 1`] = `
<ContextProvider
  value={null}
>
  <Routing
    dispatch={[Function]}
    drawerOpen={false}
    loading={true}
    location="/"
    maintenance={
      Object {
        "message": "",
        "show": false,
      }
    }
    plugins={Array []}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
    userIsloggedIn={true}
  />
</ContextProvider>
`;

exports[`Routing component renders a route for a plugin when site is under maintenance and user is admin 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/test_link",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/test_link",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/test_link",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Routing)>
        <Routing
          dispatch={[Function]}
          drawerOpen={false}
          loading={false}
          location="/"
          maintenance={
            Object {
              "message": "test",
              "show": true,
            }
          }
          plugins={
            Array [
              Object {
                "displayName": "Test Plugin",
                "link": "/test_link",
                "order": 1,
                "plugin": "test_plugin_name",
                "section": "test section",
              },
            ]
          }
          userIsAdmin={true}
          userIsloggedIn={true}
        >
          <Styled(div)
            drawerOpen={false}
          >
            <Insertion
              cache={
                Object {
                  "insert": [Function],
                  "inserted": Object {
                    "jlgjno": true,
                  },
                  "key": "css",
                  "nonce": undefined,
                  "registered": Object {},
                  "sheet": StyleSheet {
                    "_alreadyInsertedOrderInsensitiveRule": true,
                    "_insertTag": [Function],
                    "before": null,
                    "container": <head>
                      <style
                        data-emotion="css"
                        data-s=""
                      >
                        
                        .css-jlgjno{padding-bottom:36px;width:100%;-webkit-transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;}
                      </style>
                    </head>,
                    "ctr": 1,
                    "insertionPoint": undefined,
                    "isSpeedy": false,
                    "key": "css",
                    "nonce": undefined,
                    "prepend": undefined,
                    "tags": Array [
                      <style
                        data-emotion="css"
                        data-s=""
                      >
                        
                        .css-jlgjno{padding-bottom:36px;width:100%;-webkit-transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;}
                      </style>,
                    ],
                  },
                }
              }
              isStringTag={true}
              serialized={
                Object {
                  "map": undefined,
                  "name": "jlgjno",
                  "next": undefined,
                  "styles": "padding-bottom:36px;width:100%;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;",
                  "toString": [Function],
                }
              }
            />
            <div
              className="css-jlgjno"
            >
              <Switch>
                <Route
                  computedMatch={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/test_link",
                      "url": "/test_link",
                    }
                  }
                  key="test_plugin_name"
                  location={
                    Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/test_link",
                      "search": "",
                    }
                  }
                  path={
                    Array [
                      "/test_link",
                    ]
                  }
                >
                  <Connect(WithAuthComponent)
                    id="test_plugin_name"
                  >
                    <WithAuthComponent
                      id="test_plugin_name"
                      invalidToken={[Function]}
                      loading={false}
                      location="/"
                      loggedIn={true}
                      provider={
                        TestAuthProvider {
                          "authUrl": undefined,
                          "autoLogin": undefined,
                          "mnemonic": undefined,
                          "redirectUrl": null,
                          "token": "logged in",
                          "user": null,
                        }
                      }
                      requestPluginRerender={[Function]}
                      userIsAdmin={true}
                    >
                      <div>
                        <PluginPlaceHolder
                          id="test_plugin_name"
                        >
                          <div
                            id="test_plugin_name"
                          >
                            <Preloader
                              fullScreen={false}
                              loading={true}
                            >
                              Mocked Preloader
                            </Preloader>
                          </div>
                        </PluginPlaceHolder>
                      </div>
                    </WithAuthComponent>
                  </Connect(WithAuthComponent)>
                </Route>
              </Switch>
            </div>
          </Styled(div)>
        </Routing>
      </Connect(Routing)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Routing component renders a route for admin page 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/admin",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/admin",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/admin",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Routing)>
        <Routing
          dispatch={[Function]}
          drawerOpen={false}
          loading={false}
          location="/"
          maintenance={
            Object {
              "message": "",
              "show": false,
            }
          }
          plugins={Array []}
          userIsAdmin={true}
          userIsloggedIn={true}
        >
          <Styled(div)
            drawerOpen={false}
          >
            <Insertion
              cache={
                Object {
                  "insert": [Function],
                  "inserted": Object {
                    "jlgjno": true,
                  },
                  "key": "css",
                  "nonce": undefined,
                  "registered": Object {},
                  "sheet": StyleSheet {
                    "_alreadyInsertedOrderInsensitiveRule": true,
                    "_insertTag": [Function],
                    "before": null,
                    "container": <head>
                      <style
                        data-emotion="css"
                        data-s=""
                      >
                        
                        .css-jlgjno{padding-bottom:36px;width:100%;-webkit-transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;}
                      </style>
                    </head>,
                    "ctr": 1,
                    "insertionPoint": undefined,
                    "isSpeedy": false,
                    "key": "css",
                    "nonce": undefined,
                    "prepend": undefined,
                    "tags": Array [
                      <style
                        data-emotion="css"
                        data-s=""
                      >
                        
                        .css-jlgjno{padding-bottom:36px;width:100%;-webkit-transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;}
                      </style>,
                    ],
                  },
                }
              }
              isStringTag={true}
              serialized={
                Object {
                  "map": undefined,
                  "name": "jlgjno",
                  "next": undefined,
                  "styles": "padding-bottom:36px;width:100%;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;",
                  "toString": [Function],
                }
              }
            />
            <div
              className="css-jlgjno"
            >
              <Switch>
                <Route
                  computedMatch={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/admin",
                      "url": "/admin",
                    }
                  }
                  exact={true}
                  location={
                    Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/admin",
                      "search": "",
                    }
                  }
                  path="/admin"
                  render={[Function]}
                >
                  <Connect(WithAuthComponent)>
                    <WithAuthComponent
                      invalidToken={[Function]}
                      loading={false}
                      location="/"
                      loggedIn={true}
                      provider={
                        TestAuthProvider {
                          "authUrl": undefined,
                          "autoLogin": undefined,
                          "mnemonic": undefined,
                          "redirectUrl": null,
                          "token": "logged in",
                          "user": null,
                        }
                      }
                      requestPluginRerender={[Function]}
                      userIsAdmin={true}
                    >
                      <div>
                        <Component>
                          Mocked AdminPage
                        </Component>
                      </div>
                    </WithAuthComponent>
                  </Connect(WithAuthComponent)>
                </Route>
              </Switch>
            </div>
          </Styled(div)>
        </Routing>
      </Connect(Routing)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Routing component renders a route for maintenance page when site is under maintenance and user is not admin 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/test_link",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/test_link",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/test_link",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Connect(Routing)>
        <Routing
          dispatch={[Function]}
          drawerOpen={false}
          loading={false}
          location="/"
          maintenance={
            Object {
              "message": "test",
              "show": true,
            }
          }
          plugins={
            Array [
              Object {
                "displayName": "Test Plugin",
                "link": "/test_link",
                "order": 1,
                "plugin": "test_plugin_name",
                "section": "test section",
              },
            ]
          }
          userIsAdmin={false}
          userIsloggedIn={true}
        >
          <Styled(div)
            drawerOpen={false}
          >
            <Insertion
              cache={
                Object {
                  "insert": [Function],
                  "inserted": Object {
                    "jlgjno": true,
                  },
                  "key": "css",
                  "nonce": undefined,
                  "registered": Object {},
                  "sheet": StyleSheet {
                    "_alreadyInsertedOrderInsensitiveRule": true,
                    "_insertTag": [Function],
                    "before": null,
                    "container": <head>
                      <style
                        data-emotion="css"
                        data-s=""
                      >
                        
                        .css-jlgjno{padding-bottom:36px;width:100%;-webkit-transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;}
                      </style>
                    </head>,
                    "ctr": 1,
                    "insertionPoint": undefined,
                    "isSpeedy": false,
                    "key": "css",
                    "nonce": undefined,
                    "prepend": undefined,
                    "tags": Array [
                      <style
                        data-emotion="css"
                        data-s=""
                      >
                        
                        .css-jlgjno{padding-bottom:36px;width:100%;-webkit-transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;}
                      </style>,
                    ],
                  },
                }
              }
              isStringTag={true}
              serialized={
                Object {
                  "map": undefined,
                  "name": "jlgjno",
                  "next": undefined,
                  "styles": "padding-bottom:36px;width:100%;transition:margin 195ms cubic-bezier(0.4, 0, 1, 1) 0ms,width 195ms cubic-bezier(0.4, 0, 1, 1) 0ms;",
                  "toString": [Function],
                }
              }
            />
            <div
              className="css-jlgjno"
            >
              <Switch>
                <Route
                  component={[Function]}
                  computedMatch={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/test_link",
                      "search": "",
                    }
                  }
                >
                  <Component
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "key": "testKey",
                            "pathname": "/test_link",
                            "search": "",
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "key": "testKey",
                          "pathname": "/test_link",
                          "search": "",
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "key": "testKey",
                        "pathname": "/test_link",
                        "search": "",
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                  >
                    Mocked MaintenancePage
                  </Component>
                </Route>
              </Switch>
            </div>
          </Styled(div)>
        </Routing>
      </Connect(Routing)>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Routing component renders component with no plugin routes 1`] = `
<ContextProvider
  value={null}
>
  <Routing
    dispatch={[Function]}
    drawerOpen={false}
    loading={true}
    location="/"
    maintenance={
      Object {
        "message": "",
        "show": false,
      }
    }
    plugins={Array []}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
    userIsloggedIn={false}
  />
</ContextProvider>
`;

exports[`Routing component renders component with plugins 1`] = `
<ContextProvider
  value={null}
>
  <Routing
    dispatch={[Function]}
    drawerOpen={false}
    loading={true}
    location="/"
    maintenance={
      Object {
        "message": "",
        "show": false,
      }
    }
    plugins={
      Array [
        Object {
          "displayName": "Test Plugin",
          "link": "test link",
          "order": 1,
          "plugin": "test_plugin_name",
          "section": "test section",
        },
        Object {
          "displayName": "Test Plugin Alt link",
          "link": "test link alt",
          "order": 2,
          "plugin": "test_plugin_name",
          "section": "test section",
        },
        Object {
          "displayName": "Test Plugin 2",
          "link": "test link 2",
          "order": 3,
          "plugin": "test_plugin_name_2",
          "section": "test section 2",
        },
        Object {
          "admin": true,
          "displayName": "Test Plugin Admin",
          "link": "test link admin",
          "order": 4,
          "plugin": "test_plugin_name",
          "section": "test section",
        },
        Object {
          "admin": true,
          "displayName": "Test Plugin Admin Alt link",
          "link": "test link admin alt",
          "order": 5,
          "plugin": "test_plugin_name",
          "section": "test section",
        },
      ]
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
    userIsloggedIn={false}
  />
</ContextProvider>
`;

exports[`Routing component renders placeholder for a plugin 1`] = `
<div
  id="test_id"
>
  <Preloader
    fullScreen={false}
    loading={true}
  />
</div>
`;
