// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthorisedRoute component renders PageNotFound component when non admin user accesses admin component 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={false}
    location="/"
    loggedIn={true}
    provider={
      TestAuthProvider {
        "authUrl": undefined,
        "autoLogin": undefined,
        "isAdmin": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": false,
            },
          ],
        },
        "mnemonic": undefined,
        "redirectUrl": null,
        "token": "test-token",
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders PageNotFound component when site is loading due to LoadingAuthProvider 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={true}
    location="/"
    loggedIn={false}
    provider={
      LoadingAuthProvider {
        "authUrl": undefined,
        "redirectUrl": null,
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders PageNotFound component when site is loading due to loading prop 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={true}
    location="/"
    loggedIn={false}
    provider={
      LoadingAuthProvider {
        "authUrl": undefined,
        "redirectUrl": null,
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders PageNotFound component when site is loading due to siteLoading prop 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={true}
    location="/"
    loggedIn={false}
    provider={
      LoadingAuthProvider {
        "authUrl": undefined,
        "redirectUrl": null,
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders admin component when admin user accesses it 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={false}
    location="/"
    loggedIn={true}
    provider={
      TestAuthProvider {
        "authUrl": undefined,
        "autoLogin": undefined,
        "mnemonic": undefined,
        "redirectUrl": null,
        "token": "test-token",
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={true}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders non admin component when admin user accesses it 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={false}
    location="/"
    loggedIn={true}
    provider={
      TestAuthProvider {
        "authUrl": undefined,
        "autoLogin": undefined,
        "mnemonic": undefined,
        "redirectUrl": null,
        "token": "test-token",
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={true}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders non admin component when non admin user accesses it 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={false}
    location="/"
    loggedIn={true}
    provider={
      TestAuthProvider {
        "authUrl": undefined,
        "autoLogin": undefined,
        "isAdmin": [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": false,
            },
          ],
        },
        "mnemonic": undefined,
        "redirectUrl": null,
        "token": "test-token",
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={false}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders redirect when homepageUrl is configured and logged in 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    homepageUrlState={
      Object {
        "scigateway": Object {
          "homepageUrl": "/test",
        },
      }
    }
    invalidToken={[Function]}
    loading={false}
    location="/"
    loggedIn={true}
    provider={
      TestAuthProvider {
        "authUrl": undefined,
        "autoLogin": undefined,
        "mnemonic": undefined,
        "redirectUrl": null,
        "token": "test-token",
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={true}
  />
</ContextProvider>
`;

exports[`AuthorisedRoute component renders redirect when user not logged in 1`] = `
<ContextProvider
  value={null}
>
  <WithAuthComponent
    invalidToken={[Function]}
    loading={false}
    location="/"
    loggedIn={false}
    provider={
      TestAuthProvider {
        "authUrl": undefined,
        "autoLogin": undefined,
        "mnemonic": undefined,
        "redirectUrl": null,
        "token": null,
        "user": null,
      }
    }
    requestPluginRerender={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    userIsAdmin={true}
  />
</ContextProvider>
`;
