// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthorisedRoute component renders PageNotFound component when non admin user accesses admin component 1`] = `
<div>
  <WithStyles(PageNotFoundComponent) />
</div>
`;

exports[`AuthorisedRoute component renders PageNotFound component when site is loading due to LoadingAuthProvider 1`] = `
<div>
  <WithStyles(PageNotFoundComponent) />
</div>
`;

exports[`AuthorisedRoute component renders PageNotFound component when site is loading due to loading prop 1`] = `
<div>
  <WithStyles(PageNotFoundComponent) />
</div>
`;

exports[`AuthorisedRoute component renders PageNotFound component when site is loading due to siteLoading prop 1`] = `
<div>
  <WithStyles(PageNotFoundComponent) />
</div>
`;

exports[`AuthorisedRoute component renders admin component when admin user accesses it 1`] = `
<div>
  <ComponentToProtect
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  />
</div>
`;

exports[`AuthorisedRoute component renders homepage component when homepageUrl is configured and logged in 1`] = `
<div>
  <HomepageComponent
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  />
</div>
`;

exports[`AuthorisedRoute component renders non admin component when admin user accesses it 1`] = `
<div>
  <ComponentToProtect
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  />
</div>
`;

exports[`AuthorisedRoute component renders non admin component when non admin user accesses it 1`] = `
<div>
  <ComponentToProtect
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  />
</div>
`;

exports[`AuthorisedRoute component renders redirect when user not logged in 1`] = `
<div>
  <Redirect
    to={
      Object {
        "pathname": "/login",
      }
    }
  />
</div>
`;
