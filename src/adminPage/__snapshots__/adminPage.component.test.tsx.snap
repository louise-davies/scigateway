// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Admin page component should render correctly 1`] = `
<ForwardRef(Paper)
  sx={
    Object {
      "backgroundColor": "background.default",
      "flexGrow": 1,
      "padding": 2,
    }
  }
>
  <ForwardRef(Typography)
    sx={
      Object {
        "color": "secondary.main",
        "fontWeight": "bold",
      }
    }
    variant="h3"
  >
    title
  </ForwardRef(Typography)>
  <ForwardRef(Tabs)
    onChange={[Function]}
    value="maintenance"
  >
    <ForwardRef(Tab)
      aria-controls="maintenance-panel"
      id="maintenance-tab"
      label="Maintenance"
      value="maintenance"
    />
    <ForwardRef(Tab)
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "innerRef": [Function],
            "onClick": [Function],
            "replace": [Function],
            "target": [Function],
            "to": [Function],
          },
          "render": [Function],
        }
      }
      id="download-tab"
      label="Admin Download"
      to="/admin-download"
      value="download"
    />
  </ForwardRef(Tabs)>
  <div
    aria-labelledby="maintenance-tab"
    hidden={false}
    id="maintenance-panel"
    role="tabpanel"
  >
    <Styled(ForwardRef(Paper))>
      <ForwardRef(Typography)
        variant="h4"
      >
        scheduled-maintenance-title
      </ForwardRef(Typography)>
      <Styled(ForwardRef(TextareaAutosize))
        aria-label="scheduled-maintenance-message-arialabel"
        minRows={7}
        onChange={[Function]}
        placeholder="message-placeholder"
        value="Test scheduled message"
      />
      <div
        style={
          Object {
            "display": "row",
          }
        }
      >
        <ForwardRef(FormControlLabel)
          control={
            <ForwardRef(Checkbox)
              checked={false}
              color="secondary"
              inputProps={
                Object {
                  "aria-label": "scheduled-maintenance-checkbox-arialabel",
                }
              }
              onChange={[Function]}
            />
          }
          label="display-checkbox"
          labelPlacement="end"
          sx={
            Object {
              "float": "left",
            }
          }
          value={false}
        />
        <ForwardRef(Button)
          color="primary"
          onClick={[Function]}
          sx={
            Object {
              "float": "right",
            }
          }
          variant="contained"
        >
          <ForwardRef(Typography)
            color="inherit"
            noWrap={true}
            style={
              Object {
                "marginTop": 3,
              }
            }
          >
            save-button
          </ForwardRef(Typography)>
        </ForwardRef(Button)>
      </div>
    </Styled(ForwardRef(Paper))>
    <Styled(ForwardRef(Paper))>
      <ForwardRef(Typography)
        variant="h4"
      >
        maintenance-title
      </ForwardRef(Typography)>
      <Styled(ForwardRef(TextareaAutosize))
        aria-label="maintenance-message-arialabel"
        minRows={7}
        onChange={[Function]}
        placeholder="message-placeholder"
        value="Test message"
      />
      <div
        style={
          Object {
            "display": "row",
          }
        }
      >
        <ForwardRef(FormControlLabel)
          control={
            <ForwardRef(Checkbox)
              checked={false}
              color="secondary"
              inputProps={
                Object {
                  "aria-label": "maintenance-checkbox-arialabel",
                }
              }
              onChange={[Function]}
            />
          }
          label="display-checkbox"
          labelPlacement="end"
          sx={
            Object {
              "float": "left",
            }
          }
          value={false}
        />
        <ForwardRef(Button)
          color="primary"
          onClick={[Function]}
          sx={
            Object {
              "float": "right",
            }
          }
          variant="contained"
        >
          <ForwardRef(Typography)
            color="inherit"
            noWrap={true}
            sx={
              Object {
                "marginTop": "3px",
              }
            }
          >
            save-button
          </ForwardRef(Typography)>
        </ForwardRef(Button)>
      </div>
    </Styled(ForwardRef(Paper))>
  </div>
</ForwardRef(Paper)>
`;
